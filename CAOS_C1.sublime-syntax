%YAML 1.2
---
# See http://www.sublimetext.com/docs/3/syntax.html
file_extensions:
  - cos
name: 'Creatures 1'

first_line_match: '\*\s*([Cc][Aa]?[Oo][Ss]\s*|[@]?[Vv][Aa][Rr][Ii][Aa][Nn][Tt])(\(\s*[Cc][1]\s*\)|\s*[:]\s*[Cc][1])'
scope: source.caos
contexts:
  main:

    - match: '\s*\*.*$'
      scope: comment.line.caos
    - match: '(\b([Aa][Dd][Dd][Vv])\b)'
      comment: '{var} = {var} + {sum}'
      scope: entity.name.function.caos
      push: [rvalue,lvalue]

    - match: '([Aa][Ii][Mm][:])'
      comment: 'Set the target point on the [_IT_] object for subsequent [APPR] and [TOUC] commands.'
      scope: entity.name.function.caos
      push: [rvalue]

    - match: '(\b([Aa][Nn][Dd][Vv])\b)'
      comment: '{value1} = {value1} & {value2}'
      scope: entity.name.function.caos
      push: [rvalue,lvalue]

    - match: '(\b([Aa][Nn][Ii][Mm])\b)'
      comment: 'Start animation of [TARG] object or part, using the poses specified.\nAnimations ending in R will\nrepeat indefinitely.\nNote: For objects the entries are single digit poses,\nfor creatures the entries\nare 3 digit poses.\nMax length of animation string in both cases is 32 digits'
      scope: entity.name.function.caos
      push: [rvalue]

    - match: '([Aa][Pp][Pp][:])\s*([Qq][Uu][Ii][Tt])'
      captures:
        1: entity.name.function.caos.prefix
        2: entity.name.function.caos
      comment: 'Close the applet with the given id'
      scope: entity.name.function.caos
      push: [rvalue]

    - match: '(\b([Aa][Pp][Pp][Rr])\b)'
      comment: 'Approach [_IT_]\nChose a walking gait according to chemo-receptors, then start walking towards\n[_IT_].\nContinue with next instruction when you are within reach'
      scope: entity.name.function.caos

    - match: '(\b([Aa][Ss][Ll][Pp])\b)'
      comment: 'Sets/returns whether a creature is asleep. When asleep the eyes close and the creature becomes\ninsensible to some stimuli. A change of action automatically wakes creature up again.'
      scope: entity.name.function.caos
      push: [rvalue]

    - match: '(\b([Bb][Aa][Ss][Ee])\b)'
      comment: 'Specify the base image number for this object/part.\nCan be used to allow anims from a large table\nof images by moving base sprite number around table.\nThis is the only way to use [ANIM] on an object\nwith more that 10 images in its image gallery\nbecause [ANIM] uses a single digit to specify poses.'
      scope: entity.name.function.caos
      push: [rvalue]

    - match: '([Bb][Bb][Dd][:])\s*([Ee][Dd][Ii][Tt])'
      captures:
        1: entity.name.function.caos.prefix
        2: entity.name.function.caos
      comment: 'Allow user to edit the current word (n=1) Prevent further editing and relinquish keyboard (n=0)'
      scope: entity.name.function.caos
      push: [rvalue]

    - match: '([Bb][Bb][Dd][:])\s*([Ee][Mm][Ii][Tt])'
      captures:
        1: entity.name.function.caos.prefix
        2: entity.name.function.caos
      comment: '{emit} values:\n\t{n} = 0 - Broadcast as read. ie. to creatures looking at the blackboard\n\t{n} > 0\n- Broadcaast as Audible ie. to all creatures in earshot'
      scope: entity.name.function.caos
      push: [rvalue]

    - match: '([Bb][Bb][Dd][:])\s*([Ss][Hh][Oo][Ww])'
      captures:
        1: entity.name.function.caos.prefix
        2: entity.name.function.caos
      comment: '{show} value of:\n\t0 = wipes text from blackboard\n\t1 = draws current text string (ov00) onto part\n0'
      scope: entity.name.function.caos
      push: [rvalue]

    - match: '([Bb][Bb][Dd][:])\s*([Ww][Oo][Rr][Dd])'
      captures:
        1: entity.name.function.caos.prefix
        2: entity.name.function.caos
      comment: 'Install a single named word into the blackboards word list.'
      scope: entity.name.function.caos
      push: [rvalue,rvalue,rvalue]

    - match: '(\b([Bb][Hh][Vv][Rr])\b)'
      comment: 'Sets/returns the reactions to clicks by mouse and activation requests by a creature. The values for\nclick and touch are listed in the reference section'
      scope: entity.name.function.caos
      push: [rvalue,rvalue]

    - match: '(\b([Cc][Aa][Bb][Nn])\b)'
      comment: 'Set the relative co-ordinates for a vehicle cabin, the place where creatures are held.'
      scope: entity.name.function.caos
      push: [rvalue,rvalue,rvalue,rvalue]

    - match: '(\b([Cc][Hh][Ee][Mm])\b)'
      comment: 'Adds the amount given.'
      scope: entity.name.function.caos
      push: [rvalue,rvalue]

    - match: '(\b([Dd][Bb][Gg][Mm])\b)'
      comment: 'Displays string as a trace message'
      scope: entity.name.function.caos
      push: [rvalue]

    - match: '(\b([Dd][Bb][Gg][Vv])\b)'
      comment: 'Sends the value of {rvalue}. Same as [DBUG] but doesn’t force all commands to run in an [INST].'
      scope: entity.name.function.caos
      push: [rvalue]

    - match: '(\b([Dd][Bb][Uu][Gg])\b)'
      comment: 'All commands after this will run in an [INST], sends the value of {rvalue}.'
      scope: entity.name.function.caos
      push: [rvalue]

    - match: '([Dd][Dd][Ee][:])\s*([Cc][Ee][Ll][Ll])'
      captures:
        1: entity.name.function.caos.prefix
        2: entity.name.function.caos
      comment: 'Get statistics about this neurone, in the following format: Output\nState\nNumber of dendrites of\nthat type\nTotal susceptibility\nTotal short term weight\nTotal long term weight\nTotal strength\nThe\ndendrite values are totalled from all dendrites of the given dentype, for a numbered lobe and cell.'
      scope: entity.name.function.caos
      push: [rvalue,rvalue,rvalue]

    - match: '([Dd][Dd][Ee][:])\s*([Dd][Ii][Ee][Dd])'
      captures:
        1: entity.name.function.caos.prefix
        2: entity.name.function.caos
      comment: 'Update the number of norns that have died in the world'
      scope: entity.name.function.caos

    - match: '([Dd][Dd][Ee][:])\s*([Gg][Ee][Nn][Ee])'
      captures:
        1: entity.name.function.caos.prefix
        2: entity.name.function.caos
      comment: 'Output the number of genes for the following 14 types: Brain Lobe\nChemical receptor\nChemical\nemitter\nChemical reaction\nChemical half life\nChemical starting concentration Organ\nCreature\nstimulus\nCreature genus\nCreature appearance\nCreature pose\nCreature gait\nCreature instinct\nCreature\npigment'
      scope: entity.name.function.caos

    - match: '([Dd][Dd][Ee][:])\s*([Gg][Ee][Tt][Bb] [Cc][Nn][Aa][Mm])'
      captures:
        1: entity.name.function.caos.prefix
        2: entity.name.function.caos
      comment: 'Write creatures name to buffer.'
      scope: entity.name.function.caos

    - match: '([Dd][Dd][Ee][:])\s*([Gg][Ee][Tt][Bb] [Cc][Tt][Ii][Mm])'
      captures:
        1: entity.name.function.caos.prefix
        2: entity.name.function.caos
      comment: 'Get the amount of time the creature has been alive.'
      scope: entity.name.function.caos

    - match: '([Dd][Dd][Ee][:])\s*([Gg][Ee][Tt][Bb] [Dd][Aa][Tt][Aa])'
      captures:
        1: entity.name.function.caos.prefix
        2: entity.name.function.caos
      comment: 'Gets all creature data in the following format. Each entry is separated with\n‘|’\nMoniker\nName\nMothers Moniker Mothers Name Fathers Moniker Fathers Name Birth date\nBirth\nplace\nOwner Name\nOwner Telephone Number\nOwner Address\nOwner Email\nState of Creature – 0=ok,\n1=dead, 2=exported Gender\nAge'
      scope: entity.name.function.caos

    - match: '([Dd][Dd][Ee][:])\s*([Gg][Ee][Tt][Bb] [Mm][Oo][Nn][Kk])'
      captures:
        1: entity.name.function.caos.prefix
        2: entity.name.function.caos
      comment: 'Get the creatures moniker in the form ‘464f4536’ rather than ‘6EOF’'
      scope: entity.name.function.caos

    - match: '([Dd][Dd][Ee][:])\s*([Gg][Ee][Tt][Bb] [Oo][Vv][Vv][Dd])'
      captures:
        1: entity.name.function.caos.prefix
        2: entity.name.function.caos
      comment: 'Get observation data. This returns the following information, with each field separated with a\n‘|’ and each creature seperated with a ‘&’:\nName\nMoniker\nSex – 1=male, 2=female\nAge – in\n“hours:mins”\nPregnancy – either “N/A”, “No” or number\nLife Force – either number\nterminated in % or “Dead” Medical – either “Healthy”, “Sick” or “Dead”\nRoom –\nnumber of room they are in\nXpos\nYpos'
      scope: entity.name.function.caos

    - match: '([Dd][Dd][Ee][:])\s*([Hh][Aa][Tt][Cc])'
      captures:
        1: entity.name.function.caos.prefix
        2: entity.name.function.caos
      comment: 'Update the number of hatchery norns in the world.'
      scope: entity.name.function.caos

    - match: '([Dd][Dd][Ee][:])\s*([Ll][Ii][Vv][Ee])'
      captures:
        1: entity.name.function.caos.prefix
        2: entity.name.function.caos
      comment: 'Update the number of natural born norns in the world.'
      scope: entity.name.function.caos

    - match: '([Dd][Dd][Ee][:])\s*([Ll][Oo][Bb][Ee])'
      captures:
        1: entity.name.function.caos.prefix
        2: entity.name.function.caos
      comment: 'Output locations and information about brain lobes. The first number returned is the number of\nlobes, and then the information about them is returned in the following format, with the ‘|’\nsymbol separating fields:\n\t-X position start\n\t-Y position\nstart\n\t-Width\n\t-Height\n\t-Flags\n\t-Number of Dendrites \n\t-Dendrite type 0 source \n\t-Dendrite\ntype 0 minimum \n\t-Dendrite type 0 maximum \n\t-Dendrite type 1 source \n\t-Dendrite type 1 minimum\n\n\t-Dendrite type 1 maximum'
      scope: entity.name.function.caos

    - match: '([Dd][Dd][Ee][:])\s*([Nn][Ee][Gg][Gg])'
      captures:
        1: entity.name.function.caos.prefix
        2: entity.name.function.caos
      comment: 'Update number of natural eggs in the world.'
      scope: entity.name.function.caos

    - match: '([Dd][Dd][Ee][:])\s*([Pp][Aa][Nn][Cc])'
      captures:
        1: entity.name.function.caos.prefix
        2: entity.name.function.caos
      comment: 'Pan camera to the creature.'
      scope: entity.name.function.caos

    - match: '([Dd][Dd][Ee][:])\s*([Pp][Ii][Cc][Tt])'
      captures:
        1: entity.name.function.caos.prefix
        2: entity.name.function.caos
      comment: 'take snapshot of the current subject create a standard windows bmp pass file name back to client'
      scope: entity.name.function.caos
      push: [rvalue]

    - match: '([Dd][Dd][Ee][:])\s*([Pp][Uu][Tt][Bb])'
      captures:
        1: entity.name.function.caos.prefix
        2: entity.name.function.caos
      comment: 'write from string to location determined by option token'
      scope: entity.name.function.caos
      push: [token,rvalue]

    - match: '([Dd][Dd][Ee][:])\s*([Pp][Uu][Tt][Ss])'
      captures:
        1: entity.name.function.caos.prefix
        2: entity.name.function.caos
      comment: 'Send a string to the output window.'
      scope: entity.name.function.caos
      push: [rvalue]

    - match: '([Dd][Dd][Ee][:])\s*([Pp][Uu][Tt][Vv])'
      captures:
        1: entity.name.function.caos.prefix
        2: entity.name.function.caos
      comment: 'Display the value of {rvalue}'
      scope: entity.name.function.caos
      push: [rvalue]

    - match: '([Dd][Dd][Ee][:])\s*([Ss][Cc][Rr][Pp])'
      captures:
        1: entity.name.function.caos.prefix
        2: entity.name.function.caos
      comment: 'fetch a script from the scriptorium and send it (used by script editor for reading out & editing\nexisting scripts'
      scope: entity.name.function.caos
      push: [rvalue,rvalue,rvalue,rvalue]

    - match: '([Dd][Dd][Ee][:])\s*([Ww][Oo][Rr][Dd])'
      captures:
        1: entity.name.function.caos.prefix
        2: entity.name.function.caos
      comment: 'Read a word from the TARG blackboards word list. Sends the response of ‘###|text|’ where\n‘###’ is the vocabulary slot for the idea represented by the blackboard picture whose index is\nindex, and ‘text’ is the word it knows for it.'
      scope: entity.name.function.caos
      push: [rvalue]

    - match: '(\b([Dd][Ii][Vv][Vv])\b)'
      comment: '{value1} = {value1} / {value2}'
      scope: entity.name.function.caos
      push: [rvalue,lvalue]

    - match: '(\b([Dd][Oo][Ii][Ff])\b)'
      comment: 'Do next instructions if condition is true, else skip to after correct nested [ELSE] or [ENDI]'
      scope: keyword.control.caos
      push: [rvalue, eqOp, rvalue]

    - match: '(\b([Dd][Oo][Nn][Ee])\b)'
      comment: 'This voluntary or involuntary action has been completed.'
      scope: entity.name.function.caos

    - match: '(\b([Dd][Pp][Aa][Ss])\b)'
      comment: 'Drop all passengers with gravity\nThis works the same way as specifying #{dps2 1}'
      scope: entity.name.function.caos

    - match: '(\b([Dd][Rr][Ee][Aa])\b)'
      comment: 'Start dreaming. This starts processing of any pending instincts instead of receiving sensory data\nfrom the environment. Normally this should only be done during deep sleep and during embryology.\nmax\npending instincts will be processed and then dream state switches off automatically.'
      scope: entity.name.function.caos
      push: [rvalue]

    - match: '(\b([Dd][Rr][Oo][Pp])\b)'
      comment: 'Drop any objects you are carrying'
      scope: entity.name.function.caos

    - match: '(\b([Ee][Dd][Ii][Tt])\b)'
      comment: 'Adds TARG agent to hand'
      scope: entity.name.function.caos

    - match: '(\b([Ee][Ll][Ss][Ee])\b)'
      comment: 'Hit an [ELSE] during normal processing (ie. previous [DOIF] was true), so jump from here to\ncorresponding [ENDI], skipping any nested [DOIF]s en route'
      scope: keyword.control.caos

    - match: '(\b([Ee][Nn][Dd][Ii])\b)'
      comment: 'Marks end of a [DOIF] or [DOIF]/[ELSE] statement'
      scope: keyword.control.caos

    - match: '(\b([Ee][Nn][Dd][Mm])\b)'
      comment: 'Compulsory command at end of macro, placed there by Macro constructor Macro is terminated and maybe\nself-destructs only [STOP] (never [ENDM]) commands may be placed in the body of macro. [ENDM] is\nstring terminator'
      scope: keyword.control.caos

    - match: '(\b([Ee][Nn][Uu][Mm])\b)'
      comment: '[ENUM]...[NEXT]\nIterate through each object which conforms to the given classification,\nsetting\n[TARG] to point to each valid object in turn.\nFamily, Genus and/or Species can be zero to act as\nwildcards.'
      scope: keyword.control.caos
      push: [rvalue,rvalue,rvalue]

    - match: '(\b([Ee][Vv][Ee][Rr])\b)'
      comment: 'Part of a [LOOP]-[EVER] statement. Repeat loop forever.'
      scope: keyword.control.caos

    - match: '(\b([Ee][Vv][Nn][Tt])\b)'
      comment: 'Adds an event label to the Event Bar, the three types possible are BIRTH, DEATH and EGG.\nTo get a\ndeath event call this macro with targ as OWNR in it’s death script.\nTo get a birth event call this\nmacro with targ as a new creature To get an egg event call this macro with targ as a newly created\negg object.'
      scope: entity.name.function.caos
      push: [rvalue]

    - match: '(\b([Ee][Xx][Ee][Cc])\b)'
      comment: 'Execute a tool or other application.\nExample: exec [fsp.exe] [params] \nExample: exec\n[c:\path\fsp.exe] [params]\nIf fsp contains backslashes, it must be a full path, so execute GP\nprogram.\nIf no backslashes, assume it''s a tool, so try both hard drive AND CD-ROM\n[params] are the\ncommand-line params for the program (or use [] if none)'
      scope: entity.name.function.caos
      push: [rvalue,rvalue]

    - match: '([Ff][*][*][Kk])'
      comment: 'Only relevant to male creatures:\nPass any waiting sperm to female (if IT is a female of same\ngenus).\nFemale will conceive if she''s in the right condition (fertile & receptive)'
      scope: entity.name.function.caos

    - match: '(\b([Ff][Aa][Dd][Ee])\b)'
      comment: 'Fade out any controlled sound currently playing with this [TARG].'
      scope: entity.name.function.caos

    - match: '(\b([Ff][Ii][Rr][Ee])\b)'
      comment: 'Fire the neurone whose position is at xy – amount is the signal strength (0-255)'
      scope: entity.name.function.caos
      push: [rvalue,rvalue,rvalue]

    - match: '(\b([Gg][Pp][Aa][Ss])\b)'
      comment: 'Get passengers. Loads any nearby creature into the vehicles cabin'
      scope: entity.name.function.caos

    - match: '(\b([Gg][Ss][Uu][Bb])\b)'
      comment: 'GSUBs to given [SUBR] label. Often has to scan macro for subroutine start, but always remembers the\naddress of the last subr visited, so most subrs will execute quickly in loops'
      scope: entity.name.function.caos
      push: [token]

    - match: '(\b([Ii][Mm][Pp][Tt])\b)'
      comment: 'Signify how important this (voluntary) action is. i.e. how unlikely it is that another action will\noverride this one before it has finished.'
      scope: entity.name.function.caos
      push: [rvalue]

    - match: '(\b([Ii][Nn][Ss][Tt])\b)'
      comment: 'Make the rest of this macro execute in a single tick.\nThis is used to ensure the creation of an\nobject (for example) is not interrupted during the scheduling of concurrent scripts'
      scope: entity.name.function.caos

    - match: '(\b([Kk][Ii][Ll][Ll])\b)'
      comment: 'Delete the object specified.\n@example: #{kill edit} deletes the object in the [EDIT]\nbuffer\n@example: #{kill ownr} kills the owner of the script\n@example: #{kill targ} kills the current\n[TARG] object.'
      scope: entity.name.function.caos
      push: [rvalue]

    - match: '(\b([Kk][Nn][Oo][Bb])\b)'
      comment: 'Attach compound objects’ hotspot to a particular function.'
      scope: entity.name.function.caos
      push: [rvalue,rvalue]

    - match: '(\b([Ll][Oo][Oo][Pp])\b)'
      comment: 'Top of LOOP...[UNTL] statment or LOOP...[EVER]\nLOOPs may be nested, but MUST NOT be jumped out of'
      scope: keyword.control.caos

    - match: '(\b([Ll][Tt][Cc][Yy])\b)'
      comment: 'Set the latency for the creatures given involuntary action (only relevant to involuntary actions).\nPrevent this action from repeating for an amount of time defined by min max. Delay is a random\namount of ticks between min*4 and max*4.\naction  int\nmin  int\nmax  int'
      scope: entity.name.function.caos
      push: [rvalue,rvalue,rvalue]

    - match: '(\b([Mm][Aa][Tt][Ee])\b)'
      comment: 'Only relevant to male creatures – pass on waiting sperm to _IT_ (if _IT_ is female and the same\ngenus). Female will conceive if she is in the right condition – fertile and receptive.'
      scope: entity.name.function.caos

    - match: '(\b([Mm][Cc][Rr][Tt])\b)'
      comment: 'Move object to absolute location and redraw,\nthis is different from [MVTO] in that the object has\nit’s limits removed before moving.'
      scope: entity.name.function.caos
      push: [rvalue,rvalue]

    - match: '([Mm][Ee][Ss][Gg])\s*([Ss][Hh][Oo][Uu])'
      captures:
        1: entity.name.function.caos.prefix
        2: entity.name.function.caos
      comment: 'Shout message to all creatures that can hear the object'
      scope: entity.name.function.caos
      push: [rvalue]

    - match: '([Mm][Ee][Ss][Gg])\s*([Ss][Ii][Gg][Nn])'
      captures:
        1: entity.name.function.caos.prefix
        2: entity.name.function.caos
      comment: 'Send message to all creatures that can see the object'
      scope: entity.name.function.caos
      push: [rvalue]

    - match: '([Mm][Ee][Ss][Gg])\s*([Tt][Aa][Cc][Tt])'
      captures:
        1: entity.name.function.caos.prefix
        2: entity.name.function.caos
      comment: 'Send message to all creatures that are touching the object'
      scope: entity.name.function.caos
      push: [rvalue]

    - match: '([Mm][Ee][Ss][Gg])\s*([Ww][Rr][Ii][Tt])'
      captures:
        1: entity.name.function.caos.prefix
        2: entity.name.function.caos
      comment: 'Write/Send message to a specific object. Object is a pointer to an object ([TARG], [OWNR], [FROM]\nor [NORN])'
      scope: entity.name.function.caos
      push: [rvalue,rvalue]

    - match: '(\b([Mm][Oo][Dd][Vv])\b)'
      comment: '{value1} = {value1} % {value2}'
      scope: entity.name.function.caos
      push: [rvalue,lvalue]

    - match: '(\b([Mm][Uu][Ll][Vv])\b)'
      comment: '{value1} = {value1} * {value2}'
      scope: entity.name.function.caos
      push: [rvalue,lvalue]

    - match: '(\b([Mm][Vv][Bb][Yy])\b)'
      comment: 'Move object by relative amount and redraw.'
      scope: entity.name.function.caos
      push: [rvalue,rvalue]

    - match: '(\b([Mm][Vv][Tt][Oo])\b)'
      comment: 'Move object to absolute location and redraw\nNote: Should not be used on a creature that has had its\nlimit set.'
      scope: entity.name.function.caos
      push: [rvalue,rvalue]

    - match: '(\b([Nn][Ee][Gg][Vv])\b)'
      comment: '{value1} = -{value1}'
      scope: entity.name.function.caos
      push: [lvalue]

    - match: '([Nn][Ee][Ww][:])\s*([Bb][Kk][Bb][Dd])'
      captures:
        1: entity.name.function.caos.prefix
        2: entity.name.function.caos
      comment: 'Create a blackboard object – blackboard objects are the only ones that can use the [BBD:]\ncommands designed to teach words and concepts.'
      scope: entity.name.function.caos
      push: [rvalue,rvalue,rvalue,rvalue,rvalue,rvalue,rvalue,token]

    - match: '([Nn][Ee][Ww][:])\s*([Cc][Bb][Tt][Nn])'
      captures:
        1: entity.name.function.caos.prefix
        2: entity.name.function.caos
      comment: 'Create a call button object.'
      scope: entity.name.function.caos
      push: [rvalue,rvalue,rvalue,token]

    - match: '([Nn][Ee][Ww][:])\s*([Cc][Oo][Mm][Pp])'
      captures:
        1: entity.name.function.caos.prefix
        2: entity.name.function.caos
      comment: 'Create a Compound Object. By default it has no parts, these must be set up after creation –\nCompound Objects need at least one part.\nCompound Objects are different from Simple Objects in that\nthey can not be picked up – even if ATTR is set to allow it.'
      scope: entity.name.function.caos
      push: [rvalue,rvalue,rvalue,token]

    - match: '([Nn][Ee][Ww][:])\s*([Cc][Rr][Ee][Aa])'
      captures:
        1: entity.name.function.caos.prefix
        2: entity.name.function.caos
      comment: 'Create a new-born creature.'
      scope: entity.name.function.caos
      push: [rvalue,rvalue]

    - match: '([Nn][Ee][Ww][:])\s*([Gg][Ee][Nn][Ee])'
      captures:
        1: entity.name.function.caos.prefix
        2: entity.name.function.caos
      comment: 'Creates a new genome file from mum’s and dad’s (or just mum if dad=0) genomes, and stores the\nnew genome''s moniker in the variable child.\nUse [TOKN] to convert text moniker to int\n@example:\n#{NEW: GENE TOKN ADAM TOKN EVE_ OV00}'
      scope: entity.name.function.caos
      push: [lvalue,rvalue,rvalue]

    - match: '([Nn][Ee][Ww][:])\s*([Ll][Ii][Ff][Tt])'
      captures:
        1: entity.name.function.caos.prefix
        2: entity.name.function.caos
      comment: 'Create a lift object – lift objects work in conjunction with call buttons to move between\nfloors.'
      scope: entity.name.function.caos
      push: [rvalue,rvalue,token]

    - match: '([Nn][Ee][Ww][:])\s*([Pp][Aa][Rr][Tt])'
      captures:
        1: entity.name.function.caos.prefix
        2: entity.name.function.caos
      comment: 'Add apart to the current Compound Object. Should be used immediately after creating a Compound\nObject to add one or more parts to it.'
      scope: entity.name.function.caos
      push: [rvalue,rvalue,rvalue,rvalue,rvalue]

    - match: '([Nn][Ee][Ww][:])\s*([Ss][Cc][Ee][Nn])'
      captures:
        1: entity.name.function.caos.prefix
        2: entity.name.function.caos
      comment: 'Creates a scenery object – scenery objects do not need to have a unique classifier.'
      scope: entity.name.function.caos
      push: [rvalue,rvalue,rvalue,token]

    - match: '([Nn][Ee][Ww][:])\s*([Ss][Ii][Mm][Pp])'
      captures:
        1: entity.name.function.caos.prefix
        2: entity.name.function.caos
      comment: 'Creates a Simple Object. By default Simple Objects have no attributes or behavior defined, these\nmust be set up after creation.'
      scope: entity.name.function.caos
      push: [rvalue,rvalue,rvalue,rvalue,token]

    - match: '([Nn][Ee][Ww][:])\s*([Vv][Hh][Cc][Ll])'
      captures:
        1: entity.name.function.caos.prefix
        2: entity.name.function.caos
      comment: 'Create a vehicle object.'
      scope: entity.name.function.caos
      push: [rvalue,rvalue,token]

    - match: '(\b([Nn][Ee][Xx][Tt])\b)'
      comment: 'part of [ENUM]...[NEXT]'
      scope: keyword.control.caos

    - match: '(\b([Oo][Rr][Rr][Vv])\b)'
      comment: 'sets the {var} to the {var} bit-wise or with {value}\n{var} = {var} | {value}'
      scope: entity.name.function.caos
      push: [rvalue,lvalue]

    - match: '(\b([Oo][Vv][Ee][Rr])\b)'
      comment: 'Wait until [TARG] objects animation is over.\nNote: [ANIM]s ending in R will never end, hence\ncausing a lock out'
      scope: entity.name.function.caos

    - match: '(\b([Pp][Aa][Rr][Tt])\b)'
      comment: 'Sets the working part number. Future command such as POSE and ANIM, amongst others, act on that\npart of a compound agent.'
      scope: entity.name.function.caos
      push: [rvalue]

    - match: '(\b([Pp][Ll][Dd][Ss])\b)'
      comment: 'Preload the named sound into the sound cache if TARG is visible or just off screen.\nfilename value'
      scope: entity.name.function.caos
      push: [token]

    - match: '(\b([Pp][Oo][Ii][Nn])\b)'
      comment: 'Point to [_IT_]. As for [TOUC] but creature reaches out to object with head facing the camera.'
      scope: entity.name.function.caos

    - match: '(\b([Pp][Oo][Ss][Ee])\b)'
      comment: 'Sets the object (or parts) pose = i.e. which image number it is currently using'
      scope: entity.name.function.caos
      push: [rvalue]

    - match: '(\b([Pp][Rr][Ll][Dd])\b)'
      comment: 'Pre-load image cache with these poses for smoother animation later\nNote: Not applicable on a\ncreature'
      scope: entity.name.function.caos
      push: [rvalue]

    - match: '(\b([Rr][Ee][Pp][Ee])\b)'
      comment: 'End [REPS] loop'
      scope: keyword.control.caos

    - match: '(\b([Rr][Ee][Pp][Ss])\b)'
      comment: 'Repeat the following code # times, up to next [REPE] (# >= 1)\nNOTE: [REPS]/[REPE] may be nested,\nbut loops must NOT be jumped out of'
      scope: keyword.control.caos
      push: [rvalue]

    - match: '(\b([Rr][Ee][Tt][Nn])\b)'
      comment: 'returns from a [GSUB]'
      scope: keyword.control.caos

    - match: '(\b([Rr][Mm][Ee][Vv])\b)'
      comment: 'Removes an event label from the event bar. The value for targ works the same as\nEVNT.\nSCOR  int>>\nReturns chronicle information concerning a particular game item. The values for\nitem are:\n0 – Generation 1 eggs used\n1 – Number of natural eggs laid\n2 – Number of deaths\n3\n– Number of creatures imported\n4 – Number of creatures exported\n5 – Number of creatures alive'
      scope: entity.name.function.caos
      push: [rvalue]

    - match: '(\b([Rr][Nn][Dd][Vv])\b)'
      comment: 'Set a variable to a random number between {min} and {max}.'
      scope: entity.name.function.caos
      push: [rvalue,rvalue,lvalue]

    - match: '(\b([Rr][Oo][Oo][Mm])\b)'
      comment: 'Set up a room on map. LEFT, TOP, RIGHT, BOTTOM are the room rectangle in world coords \nRoom Type is\n0=INDOORS 1=SURFACE 2=UNDERSEA'
      scope: entity.name.function.caos
      push: [rvalue,rvalue,rvalue,rvalue,rvalue,rvalue]

    - match: '(\b([Rr][Tt][Aa][Rr])\b)'
      comment: 'Randomly selects a member from the given classification and sets it as [TARG]. Null if no members\nexist'
      scope: entity.name.function.caos
      push: [rvalue,rvalue,rvalue]

    - match: '([Ss][Aa][Yy][#])'
      comment: 'Speak word number in a speech bubble, and send that word as a signal message to creatures in\nearshot'
      scope: entity.name.function.caos
      push: [rvalue]

    - match: '([Ss][Aa][Yy][$])'
      comment: 'Speak the given string in a speech bubble – no signal sent'
      scope: entity.name.function.caos
      push: [rvalue]

    - match: '(\b([Ss][Aa][Yy][Nn])\b)'
      comment: 'Speak your most pressing need'
      scope: entity.name.function.caos

    - match: '(\b([Ss][Cc][Rr][Pp])\b)'
      comment: 'Indicates that the rest of this macro is to be installed into the scriptorium, making it available\nas a new/replacement event script for a given type of object.\nfamily genus species – indicate the\nowner of this script, if values of 0 are used for any of these then the script will be installed as\na default script for a wide range of objects. i.e. if species is 0 then the script will apply to all\nwho share the same family and genus. event – indicates the event that will invoke this script, see\nthe reference section for a list of event numbers.'
      scope: keyword.control.caos
      push: [rvalue,rvalue,rvalue,rvalue]

    - match: '(\b([Ss][Cc][Rr][Xx])\b)'
      comment: 'Removes the script matching this description from the scriptorium.'
      scope: entity.name.function.caos
      push: [rvalue,rvalue,rvalue,rvalue]

    - match: '(\b([Ss][Ee][Tt][Vv])\b)'
      comment: 'Set a variable to have the value {value}.'
      scope: entity.name.function.caos
      push: [rvalue,lvalue]

    - match: '(\b([Ss][Ll][Ii][Mm])\b)'
      comment: 'Set the limits of the target object.\nThis is needed when an object is first put into the world (or\nafter a MCRT command) because it appears in a state where it’s boundary limits are not defined.'
      scope: entity.name.function.caos

    - match: '(\b([Ss][Nn][Dd][Cc])\b)'
      comment: 'Play controlled sound effect if TARG is visible on screen. A controlled sound will follow TARG\naround as it moves, for the duration of the effect.'
      scope: entity.name.function.caos
      push: [token]

    - match: '(\b([Ss][Nn][Dd][Ee])\b)'
      comment: 'Play sound effect if TARG is visible on screen.'
      scope: entity.name.function.caos
      push: [token]

    - match: '(\b([Ss][Nn][Dd][Ff])\b)'
      comment: 'Set the sound status'
      scope: entity.name.function.caos
      push: [token]

    - match: '(\b([Ss][Nn][Dd][Ll])\b)'
      comment: 'Start a controlled sound loop if TARG is visible on screen'
      scope: entity.name.function.caos
      push: [token]

    - match: '(\b([Ss][Nn][Dd][Qq])\b)'
      comment: 'Play sound effect after a short delay if [TARG] is visible on screen.'
      scope: entity.name.function.caos
      push: [rvalue,token]

    - match: '(\b([Ss][Nn][Dd][Vv])\b)'
      comment: 'Play sound if [TARG] object is visible on screen \nChange volume according to distance from\nscreen\nNow replaced by [SNDE] (sound effect) which doesn''t require surrounding brackets (ie.\n[]''s)'
      scope: entity.name.function.caos
      push: [rvalue]

    - match: '(\b([Ss][Nn][Ee][Zz])\b)'
      comment: 'Creature sneezes – this will infect any nearby creatures or environment with any live bacteria it\nhas in it.'
      scope: entity.name.function.caos

    - match: '(\b([Ss][Pp][Aa][Ss])\b)'
      comment: 'Loads a named {creature} into the named {vehicle}'
      scope: entity.name.function.caos
      push: [rvalue,rvalue]

    - match: '(\b([Ss][Pp][Oo][Tt])\b)'
      comment: 'Set up a compound object hotspot for users/creatures to click on. These commands (along with\n[KNOB]) allows different parts of an object to produce different events when clicked on.\nspot# =\n(0-5) a number to identify this particular spot\nleft/top/right/bottom = Co-ordinates of hotspot\nrelative to part 0 of the object.\nNOTE: Set {left} {top} {right} {bottom} to –1 –1 –1 –1 to\nremove/blank a hotspot\n\t@example: #{spot 0 -1 -1 -1 -1} - will remove hot spot 0'
      scope: entity.name.function.caos
      push: [rvalue,rvalue,rvalue,rvalue,rvalue]

    - match: '([Ss][Tt][Ii][Mm])\s*([Ff][Rr][Oo][Mm])'
      captures:
        1: entity.name.function.caos.prefix
        2: entity.name.function.caos
      comment: 'Undocummented command. Send a stimulus to [FROM] agent.  Theoretically similar to #{ STIM WRIT FROM\n}#\nsignificance – amount to nudge the Source lobe neurone by, this decides the significance of the\nobject. input – which neurone in the General Sense lobe to fire (or 255 for none)\nList 4 chemicals\nto emit and the amounts. If less than 4 chemicals are required then the remaining values should be\nset to 0'
      scope: entity.name.function.caos
      push: [rvalue,rvalue,rvalue,rvalue,rvalue,rvalue,rvalue,rvalue,rvalue,rvalue,rvalue,rvalue]

    - match: '([Ss][Tt][Ii][Mm])\s*([Ss][Hh][Oo][Uu])'
      captures:
        1: entity.name.function.caos.prefix
        2: entity.name.function.caos
      comment: 'Shout the list of stimulus_items to all within earshot\nsignificance – amount to nudge the Source\nlobe neurone by, this decides the significance of the object. input – which neurone in the General\nSense lobe to fire (or 255 for none)\nList 4 chemicals to emit and the amounts. If less than 4\nchemicals are required then the remaining values should be set to 0'
      scope: entity.name.function.caos
      push: [rvalue,rvalue,rvalue,rvalue,rvalue,rvalue,rvalue,rvalue,rvalue,rvalue,rvalue,rvalue]

    - match: '([Ss][Tt][Ii][Mm])\s*([Ss][Ii][Gg][Nn])'
      captures:
        1: entity.name.function.caos.prefix
        2: entity.name.function.caos
      comment: 'Send a stimulus to all creatures who can see [OWNR].\nsignificance – amount to nudge the Source\nlobe neurone by, this decides the significance of the object. input – which neurone in the General\nSense lobe to fire (or 255 for none)\nList 4 chemicals to emit and the amounts. If less than 4\nchemicals are required then the remaining values should be set to 0'
      scope: entity.name.function.caos
      push: [rvalue,rvalue,rvalue,rvalue,rvalue,rvalue,rvalue,rvalue,rvalue,rvalue,rvalue,rvalue]

    - match: '([Ss][Tt][Ii][Mm])\s*([Tt][Aa][Cc][Tt])'
      captures:
        1: entity.name.function.caos.prefix
        2: entity.name.function.caos
      comment: 'Send a stimulus to all creatures who are touching [OWNR].\nsignificance – amount to nudge the\nSource lobe neurone by, this decides the significance of the object. input – which neurone in the\nGeneral Sense lobe to fire (or 255 for none)\nList 4 chemicals to emit and the amounts. If less than\n4 chemicals are required then the remaining values should be set to 0'
      scope: entity.name.function.caos
      push: [rvalue,rvalue,rvalue,rvalue,rvalue,rvalue,rvalue,rvalue,rvalue,rvalue,rvalue,rvalue]

    - match: '([Ss][Tt][Ii][Mm])\s*([Ww][Rr][Ii][Tt])'
      captures:
        1: entity.name.function.caos.prefix
        2: entity.name.function.caos
      comment: 'Send stimulus to a specific creature.\nSignificance – amount to nudge the Source lobe neurone by,\nthis decides the significance of the object. \nInput – which neurone in the General Sense lobe to\nfire (or 255 for none)\nList 4 chemicals to emit and the amounts.\nIf less than 4 chemicals are\nrequired then the remaining values should be set to 0'
      scope: entity.name.function.caos
      push: [rvalue,rvalue,rvalue,rvalue,rvalue,rvalue,rvalue,rvalue,rvalue,rvalue,rvalue,rvalue,rvalue]

    - match: '([Ss][Tt][Mm][#])\s*([Ss][Hh][Oo][Uu])'
      captures:
        1: entity.name.function.caos.prefix
        2: entity.name.function.caos
      comment: 'Shout {stimulus} to all creatures within earshot'
      scope: entity.name.function.caos
      push: [rvalue]

    - match: '([Ss][Tt][Mm][#])\s*([Ss][Ii][Gg][Nn])'
      captures:
        1: entity.name.function.caos.prefix
        2: entity.name.function.caos
      comment: 'Send {stimulus} to all creatures that can see the object'
      scope: entity.name.function.caos
      push: [rvalue]

    - match: '([Ss][Tt][Mm][#])\s*([Tt][Aa][Cc][Tt])'
      captures:
        1: entity.name.function.caos.prefix
        2: entity.name.function.caos
      comment: 'Send {stimulus} to all creatures that are touching the object'
      scope: entity.name.function.caos
      push: [rvalue]

    - match: '([Ss][Tt][Mm][#])\s*([Ww][Rr][Ii][Tt])'
      captures:
        1: entity.name.function.caos.prefix
        2: entity.name.function.caos
      comment: 'Send {stimulus} to the specified {object}'
      scope: entity.name.function.caos
      push: [rvalue,rvalue]

    - match: '(\b([Ss][Tt][Oo][Pp])\b)'
      comment: 'Stop execution (eg. following error, or before subroutine definitions start)'
      scope: entity.name.function.caos

    - match: '(\b([Ss][Tt][Pp][Cc])\b)'
      comment: 'Stop any controlled sounds currently playing with this [TARG].'
      scope: entity.name.function.caos

    - match: '(\b([Ss][Uu][Bb][Rr])\b)'
      comment: 'Identifies a Subroutine. ''label'' is a 4-char unique label name [GSUB] takes us to point AFTER\n[SUBR] labl, so only reach here through normal code flow.\nTherefore, treat [SUBR] the same as [STOP]\n([STOP] is therefore not needed before the start of any subroutines).'
      scope: keyword.control.caos
      push: [token]

    - match: '(\b([Ss][Uu][Bb][Vv])\b)'
      comment: '{value1} = {value1} - {value2}'
      scope: entity.name.function.caos
      push: [rvalue,lvalue]

    - match: '([Ss][Yy][Ss][:])\s*([Aa][Bb][Rr][Tt])'
      captures:
        1: entity.name.function.caos.prefix
        2: entity.name.function.caos
      comment: 'Abandons changes to world and closes the game window'
      scope: entity.name.function.caos

    - match: '([Ss][Yy][Ss][:])\s*([Cc][Aa][Mm][Tt])'
      captures:
        1: entity.name.function.caos.prefix
        2: entity.name.function.caos
      comment: 'moves camera to point at current [TARG]'
      scope: entity.name.function.caos

    - match: '([Ss][Yy][Ss][:])\s*([Cc][Mm][Nn][Dd])'
      captures:
        1: entity.name.function.caos.prefix
        2: entity.name.function.caos
      comment: 'Issue an ID_XXX command message to the application. This allows macros to activate ANY menu\ncommand. Note that command will get executed LATER - fn doesn''t wait before returning!\nid# int the\ndecimal ID_XXX value - look these up in the resource file & list them for users'
      scope: entity.name.function.caos
      push: [rvalue]

    - match: '([Ss][Yy][Ss][:])\s*([Cc][Mm][Rr][Aa])'
      captures:
        1: entity.name.function.caos.prefix
        2: entity.name.function.caos
      comment: 'Position camera with this co-ordinate as the top-left'
      scope: entity.name.function.caos
      push: [rvalue,rvalue]

    - match: '([Ss][Yy][Ss][:])\s*([Ee][Dd][Ii][Tt])'
      captures:
        1: entity.name.function.caos.prefix
        2: entity.name.function.caos
      comment: 'Draw a rectangle on the game window with the corners given by the co-ordinates left top right\nbottom.'
      scope: entity.name.function.caos
      push: [rvalue,rvalue,rvalue,rvalue]

    - match: '([Ss][Yy][Ss][:])\s*([Gg][Rr][Nn][Dd])'
      captures:
        1: entity.name.function.caos.prefix
        2: entity.name.function.caos
      comment: 'set ground level at position x (worldx/GROUNDW) (see [GND#] and [GNDW] macros for establishing\nuseful constants)'
      scope: entity.name.function.caos
      push: [rvalue,rvalue]

    - match: '([Ss][Yy][Ss][:])\s*([Qq][Uu][Ii][Tt])'
      captures:
        1: entity.name.function.caos.prefix
        2: entity.name.function.caos
      comment: 'Saves the world and closes the game window'
      scope: entity.name.function.caos

    - match: '([Ss][Yy][Ss][:])\s*([Ww][Pp][Oo][Ss])'
      captures:
        1: entity.name.function.caos.prefix
        2: entity.name.function.caos
      comment: 'attempt to position vivarium frame window to this size (in pixels)\nActual size will be limited to\nmaximum view size or size of screen, if necessecary'
      scope: entity.name.function.caos
      push: [rvalue,rvalue,rvalue,rvalue]

    - match: '([Ss][Yy][Ss][:])\s*([Ww][Rr][Ll][Dd])'
      captures:
        1: entity.name.function.caos.prefix
        2: entity.name.function.caos
      comment: 'Saves the current world and opens the named one'
      scope: entity.name.function.caos
      push: [rvalue]

    - match: '([Ss][Yy][Ss][:])\s*([Ww][Tt][Oo][Pp])'
      captures:
        1: entity.name.function.caos.prefix
        2: entity.name.function.caos
      comment: 'Set the world window to be the foreground window.'
      scope: entity.name.function.caos

    - match: '(\b([Tt][Aa][Rr][Gg])\b)'
      comment: 'Sets the current object of script focus.'
      scope: entity.name.function.caos
      push: [rvalue]

    - match: '(\b([Tt][Ee][Ll][Ee])\b)'
      comment: 'Teleport the vehicles occupants to the location x y and move the camera too.'
      scope: entity.name.function.caos
      push: [rvalue,rvalue]

    - match: '(\b([Tt][Ii][Cc][Kk])\b)'
      comment: 'Sets the object timer script tick rate. Set TICK to 0 to stop the timer script executing.'
      scope: entity.name.function.caos
      push: [rvalue]

    - match: '(\b([Tt][Oo][Oo][Ll])\b)'
      comment: 'Issued by a DDE tool app to register itself with the toolbar'
      scope: entity.name.function.caos
      push: [rvalue,rvalue,rvalue,rvalue]

    - match: '(\b([Tt][Oo][Uu][Cc])\b)'
      comment: 'Reach out and touch [_IT_], normally preceded with an [APPR] macro.\nContinue with next instruction\nwhen you have successfully touched [_IT_].\nIf total failure (object gone away) then present action\nschema is suppressed.'
      scope: entity.name.function.caos

    - match: '(\b([Tt][Rr][Ii][Gg])\b)'
      comment: 'Fire the neurone that is at the lobe and cell numbers specified – amount is the signal strength\n(0-255)'
      scope: entity.name.function.caos
      push: [rvalue,rvalue,rvalue]

    - match: '(\b([Uu][Nn][Tt][Ll])\b)'
      comment: 'Part of a LOOP-UNTL statement. Repeat loop unless condition is true.\nValid relations are:\nEQ –\nEqual\nNE – Not equal\nGT – Greater than\nLT – Less than\nGE – Greater than or equal to \nLE –\nLess than or equal to \nBT – Bit-wise AND function \nBF – Bit-wise NAND function'
      scope: keyword.control.caos
      push: [rvalue, eqOp, rvalue]

    - match: '(\b([Vv][Rr][Ss][Nn])\b)'
      comment: 'Only run this script if the Creatures Build ID is equivalent or higher than number.'
      scope: entity.name.function.caos
      push: [rvalue]

    - match: '(\b([Ww][Aa][Ii][Tt])\b)'
      comment: 'Wait for the specified number of game ticks before continuing with next instruction. A tick is\nroughly 1/10 sec'
      scope: entity.name.function.caos
      push: [rvalue]

    - match: '(\b([Ww][Aa][Ll][Kk])\b)'
      comment: 'Walk indefinitely. Chose a walking gait according to chemo-receptors, then start walking.\nIf\nextraspective you’ll continuously walk towards [_IT_], but the command is primarily for\nintrospective walking.'
      scope: entity.name.function.caos

    - match: '\b([Aa][Nn][Dd]|[Oo][Rr])\b'
      scope: keyword.operator.word
      push: [rvalue, eqOp, rvalue]
      comment: Joins two equality statements
    - match: '\s+'
      scope: text
      
    - match: '\b([^ ]+)\b'
      scope: invalid.illegal.caos
      pop: true
      

  lvalue:
    - match: '\s*\*.*$'
      scope: comment.line.caos
    - match: '(\b([Aa][Cc][Tt][Vv])\b)'
      comment: 'Returns objects Active status. See reference section for values.'
      pop: true
      scope: entity.name.constant.lvalue.caos

    - match: '(\b([Aa][Tt][Tt][Rr])\b)'
      comment: 'Sets/returns an objects Attributes. See reference section for values.'
      pop: true
      scope: entity.name.constant.lvalue.caos

    - match: '(\b([Bb][Aa][Bb][Yy])\b)'
      comment: 'Moniker of child genome if creature is pregnant.\nSet to 0 to finish pregnancy or a moniker to make\npregnant.'
      pop: true
      scope: entity.name.constant.lvalue.caos

    - match: '(\b([Cc][Ll][Aa][Ss])\b)'
      comment: 'This sets the classifier of the current TARG. The classifier is its unique family/genus/species id.\nThis number is calculated from the hexadecimal version of the long form classifier (see class\ncalculator below)'
      scope: variable.parameter.caos.clas
      pop: true

    - match: '(\b([Mm][Oo][Vv][Ss])\b)'
      comment: 'Gets/Returns the Movement Status of an object. See reference section for values.'
      pop: true
      scope: entity.name.constant.lvalue.caos

    - match: '(\b([Nn][Oo][Rr][Nn])\b)'
      comment: 'The currently selected creature.'
      pop: true
      scope: entity.name.constant.lvalue.caos

    - match: '(\b([Oo][Bb][Jj][Pp])\b)'
      comment: 'Specific pointer to store ID of an object for later retrieval.\nLegacy command from Creatures 1. Can\nnow use normal variables instead.'
      pop: true
      scope: entity.name.constant.lvalue.caos

    - match: '(\b([Oo][Bb][Vv][0-9])\b)'
      comment: 'OBV0 to OBV2 are variables specific to an agent. They are read from [TARG] (the target\nagent)\n@range(0 to 2)'
      scope: variable.parameter.caos.obvx
      pop: true

    - match: '(\b([Vv][Aa][Rr][0-9])\b)'
      comment: 'VAR0 to VAR9 are local variables, whose values are lost when the current script ends.\n@range(0 to\n9)'
      scope: variable.parameter.caos.varx
      pop: true

    - match: '(\b([Ww][Ii][Nn][Hh])\b)'
      comment: 'Max allowed view window height (WORLD coords)'
      pop: true
      scope: entity.name.constant.lvalue.caos

    - match: '(\b([Ww][Ii][Nn][Ww])\b)'
      comment: 'Max allowed view window width (WORLD coords)'
      pop: true
      scope: entity.name.constant.lvalue.caos

    - match: '(\b([Xx][Vv][Ee][Cc])\b)'
      comment: 'Sets/returns the vehicles x-movement vector in 1/256th of a pixel.\nThis command is a legacy from\nCreatures 1 – [VELX] will work just as good.'
      pop: true
      scope: entity.name.constant.lvalue.caos

    - match: '(\b([Yy][Vv][Ee][Cc])\b)'
      comment: 'Sets/returns the vehicles y-movement vector in 1/256th of a pixel.\nThis command is a legacy from\nCreatures 1 – [VELY] will work just as good.'
      pop: true
      scope: entity.name.constant.lvalue.caos
    - match: '\s+'
      scope: text
      
    - match: '\b([^ ]+)\b'
      scope: invalid.illegal.caos
      pop: true
      

  rvalue:
    - match: '\s*\*.*$'
      scope: comment.line.caos

    # Strings begin and end with quotes, and use backslashes as an escape
    # character
    - match: '"'
      scope: punctuation.definition.string.begin.caos
      set: double_quoted_string

    - match: ''''
      scope: punctuation.definition.character.begin.caos
      set: char

    - match: '(\[)([^\]]*)(\])'
      scope: string.quoted.other.c1.caos
      pop: true
      
     # Numbers
    - match: '[-+]?[0-9]*\.[0-9]+'
      scope: constant.numeric.float.caos
      pop: true

    - match: '\b[-+]?[0-9]+\b'
      scope: constant.numeric.integer.caos
      pop: true

    - match: '%[01]+'
      scope: constant.numeric.integer.binary.caos
      pop: true
      
    - match: '\s+'
      scope: text
      
    - match: ','
      scope: punctuation.terminator


    - match: '([_][Ii][Tt][_])'
      comment: 'Object that [OWNR] creature was attending to.\nNote: Only [OWNR]’s IT can be determined, not\n[TARG]’s.'
      pop: true
      scope: entity.name.constant.rvalue.caos

    - match: '(\b([Aa][Cc][Tt][Vv])\b)'
      comment: 'Returns objects Active status. See reference section for values.'
      pop: true
      scope: entity.name.constant.rvalue.caos

    - match: '(\b([Aa][Ss][Ll][Pp])\b)'
      comment: 'Returns whether a creature is asleep. When asleep the eyes close and the creature becomes\ninsensible to some stimuli. A change of action automatically wakes creature up again. 0=awake,\n1=asleep'
      pop: true
      scope: entity.name.constant.rvalue.caos

    - match: '(\b([Aa][Tt][Tt][Nn])\b)'
      comment: '[_IT_] object that [OWNR] creature is attending to (may be NULL)\nNOTE: only [OWNR]''s [_IT_] can be\ndetermined, not [TARG]''s'
      pop: true
      scope: entity.name.constant.rvalue.caos

    - match: '(\b([Aa][Tt][Tt][Rr])\b)'
      comment: 'Sets/returns an objects Attributes. See reference section for values.'
      pop: true
      scope: entity.name.constant.rvalue.caos

    - match: '(\b([Bb][Aa][Bb][Yy])\b)'
      comment: 'Moniker of child genome if creature is pregnant.\nSet to 0 to finish pregnancy or a moniker to make\npregnant.'
      pop: true
      scope: entity.name.constant.rvalue.caos

    - match: '(\b([Bb][Uu][Mm][Pp])\b)'
      comment: 'Returns a vehicle’s collision data. This is a legacy command left in for completeness. To utilise\nthis a vehicle must move use XVEC and YVEC (rather than VELX and VELY) and have ATTR set up to\nrespond to boundaries.\nThe values returned are from a bit-field where:\n\t1 = hit left\n\t2 = hit\nright\n\t4 = hit top\n\t8 = hit bottom\nSo, for example: a value of 1 corresponds to having hit a wall\nto the left; a value of 4 corresponds to having hit a ceiling; a value of 5 corresponds to having\nhit a ceiling and a wall to the left (sum of ceiling=4, left=1)'
      pop: true
      scope: entity.name.constant.rvalue.caos

    - match: '(\b([Cc][Aa][Gg][Ee])\b)'
      comment: 'Returns the creatures stage of life.\n0 – embryo\n1 – baby\n2 – child\n3 – adolescent\n4 –\nyouth\n5 – adult\n6 – old\n7 – senile'
      pop: true
      scope: entity.name.constant.rvalue.caos

    - match: '(\b([Cc][Aa][Mm][Nn])\b)'
      comment: 'Creature age in minutes [ABUS]'
      pop: true
      scope: entity.name.constant.rvalue.caos

    - match: '(\b([Cc][Aa][Rr][Rr])\b)'
      comment: 'Object that’s carrying [OWNR].\nFor carryer of [TARG] see [TCAR]'
      pop: true
      scope: entity.name.constant.rvalue.caos

    - match: '(\b([Cc][Hh][Ee][Mm])\b)'
      comment: 'Returns the concentration of a chemical in a creatures bloodstream or adds the amount given.'
      set: [rvalue]
      scope: entity.name.constant.rvalue.caos

    - match: '(\b([Cc][Ll][Aa][Ss])\b)'
      comment: 'This sets the classifier of the current TARG. The classifier is its unique family/genus/species id.\nThis number is calculated from the hexadecimal version of the long form classifier (see class\ncalculator below)'
      scope: variable.parameter.caos.clas
      pop: true

    - match: '(\b([Dd][Ee][Aa][Dd])\b)'
      comment: 'Creature is dead'
      pop: true
      scope: entity.name.constant.rvalue.caos

    - match: '(\b([Dd][Rr][Ii][Vv])\b)'
      comment: 'Returns the state of the creatures Drive number'
      set: [rvalue]
      scope: entity.name.constant.rvalue.caos

    - match: '([Dd][Rr][Vv][!])'
      comment: 'Returns the id of the highest drive for the target creature.'
      pop: true
      scope: entity.name.constant.rvalue.caos

    - match: '(\b([Ee][Dd][Ii][Tt])\b)'
      comment: 'The contents of the edit buffer, set by using the [EDIT] command or shift clicking an object.'
      pop: true
      scope: entity.name.constant.rvalue.caos

    - match: '(\b([Ee][Xx][Ee][Cc])\b)'
      comment: 'object who EXECuted the tool who owns this\nreturn (int)Exec; dde macro. NOTE: only valid for\nDDE\ntools who *know* that they were executed by an object'
      pop: true
      scope: entity.name.constant.rvalue.caos

    - match: '(\b([Ff][Mm][Ll][Yy])\b)'
      comment: 'Returns the object’s family'
      pop: true
      scope: entity.name.constant.rvalue.caos

    - match: '(\b([Ff][Rr][Oo][Mm])\b)'
      comment: 'Object who caused event leading to execution of this script.'
      pop: true
      scope: entity.name.constant.rvalue.caos

    - match: '(\b([Gg][Ee][Nn][Dd])\b)'
      comment: 'Returns [OWNR] Creature''s gender. Appears to return 1 on non-creature [OWNR] agents'
      pop: true
      scope: entity.name.constant.rvalue.caos

    - match: '([Gg][Nn][Dd][#])'
      comment: 'Number of ground level data on map'
      pop: true
      scope: entity.name.constant.rvalue.caos

    - match: '(\b([Gg][Nn][Dd][Ww])\b)'
      comment: 'Number of pixels per ground datum'
      pop: true
      scope: entity.name.constant.rvalue.caos

    - match: '(\b([Gg][Nn][Uu][Ss])\b)'
      comment: 'Returns the object''s genus'
      pop: true
      scope: entity.name.constant.rvalue.caos

    - match: '(\b([Gg][Rr][Nn][Dd])\b)'
      comment: 'Returns the ground level of the first surface room at x position in the world.\nGround, in this\ncase, is just the bottom of the first surface room and doesn’t take into account uneven floors or\ndoor values of adjoining rooms.'
      set: [rvalue]
      scope: entity.name.constant.rvalue.caos

    - match: '(\b([Hh][Gg][Hh][Tt])\b)'
      comment: 'Returns objects height'
      pop: true
      scope: entity.name.constant.rvalue.caos

    - match: '(\b([Hh][Oo][Uu][Rr])\b)'
      comment: 'Returns the number of game hours elapsed since game start.'
      pop: true
      scope: entity.name.constant.rvalue.caos

    - match: '(\b([Ll][Ii][Mm][Bb])\b)'
      comment: 'Returns object’s Limit to the Bottom as absolute value of rooms boundary\nNote: Room boundaries\nare not the same as walls, rooms can join but still allow full passage between them.'
      pop: true
      scope: entity.name.constant.rvalue.caos

    - match: '(\b([Ll][Ii][Mm][Ll])\b)'
      comment: 'Returns object’s Limit to the Left as absolute value of rooms boundary\nNote: Room boundaries are\nnot the same as walls, rooms can join but still allow full passage between them.'
      pop: true
      scope: entity.name.constant.rvalue.caos

    - match: '(\b([Ll][Ii][Mm][Rr])\b)'
      comment: 'Returns object’s Limit to the Right as absolute value of rooms boundary\nNote: Room boundaries are\nnot the same as walls, rooms can join but still allow full passage between them.'
      pop: true
      scope: entity.name.constant.rvalue.caos

    - match: '(\b([Ll][Ii][Mm][Tt])\b)'
      comment: 'Returns object’s Limit to the Top as absolute value of rooms boundary\nNote: Room boundaries are\nnot the same as walls, rooms can join but still allow full passage between them.'
      pop: true
      scope: entity.name.constant.rvalue.caos

    - match: '(\b([Mm][Ii][Nn][Ss])\b)'
      comment: 'Returns the number of game minutes elapsed since game start.'
      pop: true
      scope: entity.name.constant.rvalue.caos

    - match: '(\b([Mm][Oo][Vv][Ss])\b)'
      comment: 'Gets/Returns the Movement Status of an object. See reference section for values.'
      pop: true
      scope: entity.name.constant.rvalue.caos

    - match: '(\b([Nn][Ee][Ii][Dd])\b)'
      comment: 'Returns an objects Neural ID – i.e. which attention lobe neurone corresponds to this object'
      pop: true
      scope: entity.name.constant.rvalue.caos

    - match: '(\b([Nn][Oo][Rr][Nn])\b)'
      comment: 'The currently selected creature.'
      pop: true
      scope: entity.name.constant.rvalue.caos

    - match: '(\b([Oo][Bb][Jj][Pp])\b)'
      comment: 'Specific pointer to store ID of an object for later retrieval.\nLegacy command from Creatures 1. Can\nnow use normal variables instead.'
      pop: true
      scope: entity.name.constant.rvalue.caos

    - match: '(\b([Oo][Bb][Vv][0-9])\b)'
      comment: 'OBV0 to OBV2 are variables specific to an agent. They are read from [TARG] (the target\nagent)\n@range(0 to 2)'
      scope: variable.parameter.caos.obvx
      pop: true

    - match: '(\b([Oo][Ww][Nn][Rr])\b)'
      comment: 'default object (owner of script, or pet if [DDE])'
      pop: true
      scope: entity.name.constant.rvalue.caos

    - match: '(\b([Pp][Nn][Tt][Rr])\b)'
      comment: 'The hand/pointer object.'
      pop: true
      scope: entity.name.constant.rvalue.caos

    - match: '(\b([Pp][Oo][Ss][Bb])\b)'
      comment: 'Returns the object’s Position – Bottom edge of object'
      pop: true
      scope: entity.name.constant.rvalue.caos

    - match: '(\b([Pp][Oo][Ss][Ee])\b)'
      comment: 'Returns the objects (or parts) pose – i.e. which image number it is currently using'
      pop: true
      scope: entity.name.constant.rvalue.caos

    - match: '(\b([Pp][Oo][Ss][Ll])\b)'
      comment: 'Returns the object’s Position – Left edge of object'
      pop: true
      scope: entity.name.constant.rvalue.caos

    - match: '(\b([Pp][Oo][Ss][Rr])\b)'
      comment: 'Returns the object’s Position – Right edge of object'
      pop: true
      scope: entity.name.constant.rvalue.caos

    - match: '(\b([Pp][Oo][Ss][Tt])\b)'
      comment: 'Returns the object’s Position – Top edge of object'
      pop: true
      scope: entity.name.constant.rvalue.caos

    - match: '([Rr][Mm][Ss][#])'
      comment: 'Returns the number of rooms defined in the world.'
      pop: true
      scope: entity.name.constant.rvalue.caos

    - match: '(\b([Rr][Oo][Oo][Mm])\b)'
      comment: 'return world l,t,r,b or Type of given room where "edge" = 0=l 1=r 2=t 3=b\nor "edge" = 4 returns\nroom Type (INDOORS...) Returns 0 if no such room'
      set: [rvalue,rvalue]
      scope: entity.name.constant.rvalue.caos

    - match: '(\b([Ss][Cc][Oo][Rr])\b)'
      comment: 'return scores stored in score.cpp -- Alima'
      pop: true
      scope: entity.name.constant.rvalue.caos

    - match: '(\b([Ss][Nn][Dd][Ss])\b)'
      comment: 'sound status\nBit 0 = Sound on/off\nBit 1 = Sound mode (foreground only\continuous)'
      pop: true
      scope: entity.name.constant.rvalue.caos

    - match: '(\b([Ss][Pp][Cc][Ss])\b)'
      comment: 'Returns the object’s species'
      pop: true
      scope: entity.name.constant.rvalue.caos

    - match: '(\b([Tt][Aa][Rr][Gg])\b)'
      comment: 'the current object of script focus.'
      pop: true
      scope: entity.name.constant.rvalue.caos

    - match: '(\b([Tt][Cc][Aa][Rr])\b)'
      comment: 'Returns carrier of [TARG].\nFor carrier of [OWNR] see [CARR]'
      pop: true
      scope: entity.name.constant.rvalue.caos

    - match: '(\b([Tt][Ee][Mm][Pp])\b)'
      comment: 'Air temperature near [TARG] object\nrange (-3 to +3)'
      pop: true
      scope: entity.name.constant.rvalue.caos

    - match: '(\b([Tt][Oo][Kk][Nn])\b)'
      comment: 'Convert 4 characters into an integer. Generally only used for the following commands to reference a\nstring moniker, rather than the integer they require.'
      set: [token]
      scope: entity.name.constant.rvalue.caos

    - match: '(\b([Tt][Oo][Tt][Ll])\b)'
      comment: 'Returns the number of objects in the world who fit this specifier'
      set: [rvalue,rvalue,rvalue]
      scope: entity.name.constant.rvalue.caos

    - match: '(\b([Tt][Oo][Uu][Cc])\b)'
      comment: 'Returns 1 if these two objects are in contact.\n@example: #{doif touc targ ownr gt 0} - DOIF [TARG]\nand [OWNR] are touching'
      set: [rvalue,rvalue]
      scope: entity.name.constant.rvalue.caos

    - match: '(\b([Vv][Aa][Rr][0-9])\b)'
      comment: 'VAR0 to VAR9 are local variables, whose values are lost when the current script ends.\n@range(0 to\n9)'
      scope: variable.parameter.caos.varx
      pop: true

    - match: '(\b([Vv][Rr][Ss][Nn])\b)'
      comment: 'Return the Creatures Build ID'
      pop: true
      scope: entity.name.constant.rvalue.caos

    - match: '(\b([Ww][Dd][Tt][Hh])\b)'
      comment: 'Returns objects width'
      pop: true
      scope: entity.name.constant.rvalue.caos

    - match: '(\b([Ww][Ii][Nn][Dd])\b)'
      comment: 'Wind speed/direction near [TARG] object\nRange (-3 to +3)'
      pop: true
      scope: entity.name.constant.rvalue.caos

    - match: '(\b([Ww][Ii][Nn][Hh])\b)'
      comment: 'Max allowed view window height (WORLD coords)'
      pop: true
      scope: entity.name.constant.rvalue.caos

    - match: '(\b([Ww][Ii][Nn][Ww])\b)'
      comment: 'Max allowed view window width (WORLD coords)'
      pop: true
      scope: entity.name.constant.rvalue.caos

    - match: '(\b([Xx][Vv][Ee][Cc])\b)'
      comment: 'Sets/returns the vehicles x-movement vector in 1/256th of a pixel.\nThis command is a legacy from\nCreatures 1 – [VELX] will work just as good.'
      pop: true
      scope: entity.name.constant.rvalue.caos

    - match: '(\b([Yy][Vv][Ee][Cc])\b)'
      comment: 'Sets/returns the vehicles y-movement vector in 1/256th of a pixel.\nThis command is a legacy from\nCreatures 1 – [VELY] will work just as good.'
      pop: true
      scope: entity.name.constant.rvalue.caos
    - match: '\s+'
      scope: text
      
    - match: '\b([^ ]+)\b'
      scope: invalid.illegal.caos
      pop: true
      

  token:
    - match: '\s*\*.*$'
      scope: comment.line.caos

    - match: '\s*\b[^"'']{4}\b'
      scope: entity.name.function.caos
      pop: true

    - match: '\b.+\b'
      scope: invalid.illegal
      pop: true

  char:
    - meta_scope: constant.character.caos

    - match: '\.'
      scope: constant.character.escape.caos

    - match: '[^'']'

    - match: ''''
      pop: true

    - match: '\b..+\b'
      scope: invalid.illegal.caos


  double_quoted_string:
    - meta_scope: string.quoted.double

    - match: '\\.'
      scope: constant.character.escape.caos

    - match: '[^"]'
      scope: string.quoted.double

    - match: '"'
      pop: true
      
  
  eqOp:
    - match: '\b[Ee][Qq]\b|='
      scope:  keyword.control.conditional.caos
      pop: true
      comment: "Equal"

    - match: '\b[Nn][Ee]\b|!=|<>'
      scope:  keyword.control.conditional.caos
      pop: true
      comment: Not Equal

    - match: '\b[Gg][Ee]\b|>='
      scope:  keyword.control.conditional.caos
      pop: true
      comment: Greate Than/Equal
      
    - match: '\b[Gg][Tt]\b|>'
      scope:  keyword.control.conditional.caos
      pop: true
      comment: Greater Than

    - match: '\b[Ll][Ee]\b|<='
      scope:  keyword.control.conditional.caos
      pop: true
      comment: Less Than/Equal
      
    - match: '\b[Ll][Tt]\b|<'
      scope:  keyword.control.conditional.caos
      pop: true
      comment: Less Than


    - match: '\b[Bb][Tt]\b'
      scope:  keyword.control.conditional.caos
      pop: true
      comment: Bitwise AND

    - match: '\b[Bb][Ff]\b'
      scope:  keyword.control.conditional.caos
      pop: true
      comment: Bitwise NAND or Bitwise And == False

    - match: '\b([^ ]+)\b'
      scope: invalid.illegal.caos
      pop: true
      